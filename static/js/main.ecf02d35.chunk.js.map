{"version":3,"sources":["SqlApi.js","components/SqlResultTable.js","components/QueryOptionsDropdown.js","components/Q1PokedexLookup.js","components/Q2MoveAilmentLookup.js","components/Q3MoveStatChangeLookup.js","components/NudOption.js","components/Q4EffectiveMoveLookup.js","components/Q5PokemonEcounterLookup.js","components/Q6LocationPokemonLookup.js","components/Q7PopularPokemonLookup.js","components/Q8MultiGenerationPokemonLookup.js","components/Q9PokemonTypePopularity.js","components/Q10MoveTypePopularity.js","components/QEXRawTableLookup.js","App.js","index.js"],"names":["db","init","initSqlite","a","console","warn","sqlPromise","initSqlJs","locateFile","file","dataPromise","fetch","then","res","arrayBuffer","Promise","all","SQL","buf","Database","Uint8Array","error","isReady","execPrepared","query","values","statement","prepare","log","getAsObject","exec","execQuiet","run","SqlResultTable","cols","this","props","rows","csv","forEach","x","slice","r","saveAs","Blob","type","downloadBtn","length","Button","disabled","size","className","color","onClick","saveAsCsv","Table","striped","bordered","hover","map","name","i","row","value","React","Component","QueryOptionsDropdown","result","sql","onChange","state","options","selectedOption","key","setState","filter","Dropdown","Toggle","variant","id","Menu","Item","active","setValue","eventKey","Q1PokedexLookup","pokedex","table","columns","undefined","runQuery","Q2MoveAilmentLookup","ailment","Q3MoveStatChangeLookup","stat","target","NudOption","initialValue","val","Math","min","max","Form","Control","Q4EffectiveMoveLookup","pp","accuracy","Q5PokemonEcounterLookup","version","Q6LocationPokemonLookup","location","Q7PopularPokemonLookup","Q8MultiGenerationPokemonLookup","generation","Q9PokemonTypePopularity","Q10MoveTypePopularity","QEXRawTableLookup","App","window","Navbar","bg","Brand","Container","Tabs","defaultActiveKey","Tab","title","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6pBAEIA,E,sIACAC,GAAO,EAEJ,SAAeC,IAAtB,+B,4CAAO,sCAAAC,EAAA,0DACCF,EADD,uBAECG,QAAQC,KAAK,wBAFd,0CAOOC,EAAaC,IAAU,CACzBC,WAAY,SAAAC,GAAI,wCAA+BA,MAE7CC,EAAcC,MAAM,qBAAqBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,iBAVhE,SAW0BC,QAAQC,IAAI,CAACV,EAAYI,IAXnD,mCAWQO,EAXR,KAWaC,EAXb,KAYClB,EAAK,IAAIiB,EAAIE,SAAS,IAAIC,WAAWF,IACrCjB,GAAO,EAbR,kDAeCG,QAAQiB,MAAM,iCAff,2D,sBAmBA,SAASC,IACZ,OAAOrB,EAIJ,SAASsB,EAAaC,EAAOC,GAChC,GAAKxB,EAAL,CAEA,IAAMyB,EAAY1B,EAAG2B,QAAQH,GAE7B,OADApB,QAAQwB,IAAIF,GACLA,EAAUG,YAAYJ,IAI1B,SAASK,EAAKN,GACjB,GAAKvB,EAEL,OAAOD,EAAG8B,KAAKN,GAIZ,SAASO,EAAUP,GACjBvB,GAELD,EAAGgC,IAAIR,G,sCC3CUS,E,+JAEjB,WACI,IAAMC,EAAOC,KAAKC,MAAMF,KAClBG,EAAOF,KAAKC,MAAMC,KACpBC,EAAM,GAEVJ,EAAKK,SAAQ,SAACC,GACVF,GAAOE,EAAI,OAGfF,EAAMA,EAAIG,MAAM,GAAI,GACpBH,GAAO,KAEPD,EAAKE,SAAQ,SAACG,GACVA,EAAEH,SAAQ,SAACC,GACPF,GAAOE,EAAI,OAGfF,EAAMA,EAAIG,MAAM,GAAI,GACpBH,GAAO,QAGXK,iBAAO,IAAIC,KAAK,CAACN,GAAM,CAACO,KAAM,6BAA8B,gB,oBAGhE,WAAU,IAIFC,EAJC,OACCZ,EAAOC,KAAKC,MAAMF,KAClBG,EAAOF,KAAKC,MAAMC,KAYxB,OAPIS,EADAT,EAAKU,OAAS,IACA,cAACC,EAAA,EAAD,CAAQC,UAAQ,EAACC,KAAK,KAAtB,SAA2B,sBAAMC,UAAU,UAAhB,+DAClCd,EAAKU,OAAS,IACP,eAACC,EAAA,EAAD,CAAQI,MAAM,UAAUF,KAAK,KAAKG,QAAS,kBAAM,EAAKC,aAAtD,yBAA+E,sBAAMH,UAAU,UAAhB,6CAE/E,cAACH,EAAA,EAAD,CAAQE,KAAK,KAAKG,QAAS,kBAAM,EAAKC,aAAtC,yBAId,sBAAKH,UAAU,mBAAf,UACI,8BAAK,qCAAQd,EAAKU,OAAb,aAA+BD,OACnCT,EAAKU,OAAS,MACX,0IAEJ,qBAAKI,UAAU,QAAf,SACI,eAACI,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACR,KAAK,KAAnC,UACI,gCACI,6BACKhB,EAAKyB,KAAI,SAACC,EAAMC,GAAP,OAAc,6BAAaD,GAAJC,UAGzC,gCACKxB,EAAKI,MAAM,EAAG,KAAMkB,KAAI,SAACG,EAAKD,GAAN,OACrB,6BACKC,EAAIH,KAAI,SAACI,EAAOF,GAAR,OACL,6BAAaE,GAAJF,OAFRA,oB,GAvDGG,IAAMC,W,SCD7BC,E,kDACjB,WAAY9B,GAAQ,IAAD,sBAGf,IACM+B,EAASC,GAHf,cAAMhC,IAEaA,MAAMZ,OACM,GAJhB,OAKf,EAAKY,MAAMiC,SAASF,EAAO1C,OAAO,GAAG,IACrC,EAAK6C,MAAQ,CACTC,QAASJ,EAAO1C,OAChB+C,eAAgBL,EAAO1C,OAAO,GAAG,GACjC4C,SAAU,EAAKjC,MAAMiC,UATV,E,4CAanB,SAASI,GACLtC,KAAKuC,SAAS,CAACF,eAAgBC,IAC/BtC,KAAKC,MAAMiC,SAASI,K,oBAGxB,WAAU,IAAD,OACCF,EAAUpC,KAAKmC,MAAMC,QACrBC,EAAiBD,EAAQI,QAAO,SAAAnC,GAAC,OAAIA,EAAE,KAAO,EAAK8B,MAAME,kBAAgB,GAE/E,OACI,eAACI,EAAA,EAAD,CAAUzB,UAAU,iBAApB,UACI,cAACyB,EAAA,EAASC,OAAV,CAAiB3B,KAAK,KAAK4B,QAAQ,UAAUC,GAAG,iBAAhD,SACKP,EAAe,KAGpB,cAACI,EAAA,EAASI,KAAV,UACKT,EAAQZ,KAAI,SAACnB,EAAGqB,GAAJ,OACT,cAACe,EAAA,EAASK,KAAV,CAAeC,OAAQV,EAAe,KAAOhC,EAAE,GAAIa,QAAS,WAAO,EAAK8B,SAAS3C,EAAE,KAAc4C,SAAUvB,EAA3G,SAA+GrB,EAAE,IAAnBqB,e,GA/BpEG,IAAMC,WCEnCoB,E,kDAEjB,WAAYjD,GAAQ,IAAD,8BACf,cAAMA,IAEDkC,MAAQ,CACTgB,QAAS,EACTnB,OAAQ,MALG,E,4CASnB,WACI/D,QAAQwB,IAAIO,KAAKmC,MAAMgB,SACvB,IAAMnB,EAASC,EAAA,0cAOcjC,KAAKmC,MAAMgB,QAPzB,sEASgB,GAC/BnD,KAAKuC,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFoB,EAFC,OACCpB,EAAShC,KAAKmC,MAAMH,OAW1B,OAPIoB,EADApB,EACS,cAAC,EAAD,CAAgB9B,KAAM8B,EAAO1C,OAAQS,KAAMiC,EAAOqB,eACzCC,IAAXtB,EACE,qBAAKhB,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,2DACA,cAAC,EAAD,CACIkB,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAACY,QAAS9C,KAC1ChB,MAAM,oCACV,4CACA,sBACA,cAACwB,EAAA,EAAD,CAAQE,KAAK,KAAKG,QAAS,WAAO,EAAKqC,YAAvC,sBAEJ,uBACCH,S,GAlD4BvB,IAAMC,W,oCCA9B0B,E,kDAEjB,WAAYvD,GAAQ,IAAD,8BACf,cAAMA,IAEDkC,MAAQ,CACTzB,KAAM,EACN+C,QAAS,EACTzB,OAAQ,MANG,E,4CAUnB,WACI,IAAMA,EAASC,EAAA,ifAQSjC,KAAKmC,MAAMzB,KARpB,oCASEV,KAAKmC,MAAMsB,QATb,iCAUM,GACrBzD,KAAKuC,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFoB,EAFC,OACCpB,EAAShC,KAAKmC,MAAMH,OAW1B,OAPIoB,EADApB,EACS,cAAC,EAAD,CAAgB9B,KAAM8B,EAAO1C,OAAQS,KAAMiC,EAAOqB,eACzCC,IAAXtB,EACE,qBAAKhB,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,sEACA,cAAC,EAAD,CACIkB,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAAC7B,KAAML,KACvChB,MAAM,gCACV,iEACA,cAAC,EAAD,CACI6C,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAACkB,QAASpD,KAC1ChB,MAAM,mJACV,4CACA,sBACA,cAACwB,EAAA,EAAD,CAAQE,KAAK,KAAKG,QAAS,WAAO,EAAKqC,YAAvC,sBAEJ,uBACCH,S,GAvDgCvB,IAAMC,WCAlC4B,E,kDAEjB,WAAYzD,GAAQ,IAAD,8BACf,cAAMA,IAEDkC,MAAQ,CACTzB,KAAM,EACNiD,KAAM,EACNC,OAAQ,EACR5B,OAAQ,MAPG,E,4CAWnB,WACI,IAAMA,EAASC,EAAA,+kBASSjC,KAAKmC,MAAMzB,KATpB,qCAUGV,KAAKmC,MAAMyB,OAVd,oCAWE5D,KAAKmC,MAAMwB,KAXb,2CAYgB,GAC/B3D,KAAKuC,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFoB,EAFC,OACCpB,EAAShC,KAAKmC,MAAMH,OAW1B,OAPIoB,EADApB,EACS,cAAC,EAAD,CAAgB9B,KAAM8B,EAAO1C,OAAQS,KAAMiC,EAAOqB,eACzCC,IAAXtB,EACE,qBAAKhB,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,sEACA,cAAC,EAAD,CACIkB,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAAC7B,KAAML,KACvChB,MAAM,gCACV,gEACA,cAAC,EAAD,CACI6C,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAACoB,KAAMtD,KACvChB,MAAM,4KACV,qDACA,cAAC,EAAD,CACI6C,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAACqB,OAAQvD,KACzChB,MAAM,yLACV,qCACA,sBACA,cAACwB,EAAA,EAAD,CAAQE,KAAK,KAAKG,QAAS,WAAO,EAAKqC,YAAvC,sBAEJ,uBACCH,S,GA9DmCvB,IAAMC,W,SCHrC+B,E,kDACjB,WAAY5D,GAAQ,IAAD,8BACf,cAAMA,IAEDkC,MAAQ,CACTP,MAAO,EAAK3B,MAAM6D,cAJP,E,4CAQnB,SAASC,GACLA,EAAMC,KAAKC,IAAIjE,KAAKC,MAAMiE,IAAKF,KAAKE,IAAIlE,KAAKC,MAAMgE,IAAKF,EAAIH,OAAOhC,QACnE5B,KAAKuC,SAAS,CAACX,MAAOmC,IACtB/D,KAAKC,MAAMiC,SAAS6B,K,oBAGxB,WAAU,IAAD,OACL,OACI,qBAAK/C,UAAU,YAAf,SACI,cAACmD,EAAA,EAAKC,QAAN,CAAcrD,KAAK,KAAKL,KAAK,SAASuD,IAAKjE,KAAKC,MAAMgE,IAAKC,IAAKlE,KAAKC,MAAMiE,IAAKtC,MAAO5B,KAAKmC,MAAMP,MAAOM,SAAU,SAAC7B,GAAD,OAAO,EAAK2C,SAAS3C,Y,GAlBjHwB,IAAMC,WCIxBuC,E,kDAEjB,WAAYpE,GAAQ,IAAD,8BACf,cAAMA,IAEDkC,MAAQ,CACTzB,KAAM,EACN4D,GAAI,EACJC,SAAU,GACVvC,OAAQ,MAPG,E,4CAWnB,WACI,IAAMA,EAASC,EAAA,sYAOMjC,KAAKmC,MAAMzB,KAPjB,qCAQGV,KAAKmC,MAAMmC,GARd,2CASStE,KAAKmC,MAAMoC,SATpB,MASiC,GAChDvE,KAAKuC,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFoB,EAFC,OACCpB,EAAShC,KAAKmC,MAAMH,OAW1B,OAPIoB,EADApB,EACS,cAAC,EAAD,CAAgB9B,KAAM8B,EAAO1C,OAAQS,KAAMiC,EAAOqB,eACzCC,IAAXtB,EACE,qBAAKhB,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,oFACA,cAAC,EAAD,CACIkB,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAAC7B,KAAML,KACvChB,MAAM,gCACV,wEACA,cAAC,EAAD,CACI6C,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAAC+B,GAAIjE,KACrCyD,aAAc9D,KAAKmC,MAAMmC,GACzBL,IAAK,EACLC,IAAK,KACT,iEACA,cAAC,EAAD,CACIhC,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAACgC,SAAUlE,KAC3CyD,aAAc9D,KAAKmC,MAAMoC,SACzBN,IAAK,EACLC,IAAK,MACT,6CACA,sBACA,cAACrD,EAAA,EAAD,CAAQE,KAAK,KAAKG,QAAS,WAAO,EAAKqC,YAAvC,sBAEJ,uBACCH,S,GA/DkCvB,IAAMC,WCApC0C,E,kDAEjB,WAAYvE,GAAQ,IAAD,8BACf,cAAMA,IAEDkC,MAAQ,CACTsC,QAAS,EACT/D,KAAM,EACNuD,IAAK,EACLC,IAAK,IACLlC,OAAQ,MARG,E,4CAYnB,WACI,IAAMA,EAASC,EAAA,ulBAUIjC,KAAKmC,MAAMsC,QAVf,0CAWQzE,KAAKmC,MAAMzB,KAXnB,yHAcYV,KAAKmC,MAAM8B,IAdvB,4CAeUjE,KAAKmC,MAAM+B,IAfrB,MAe6B,GAC5ClE,KAAKuC,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFoB,EAFC,OACCpB,EAAShC,KAAKmC,MAAMH,OAW1B,OAPIoB,EADApB,EACS,cAAC,EAAD,CAAgB9B,KAAM8B,EAAO1C,OAAQS,KAAMiC,EAAOqB,eACzCC,IAAXtB,EACE,qBAAKhB,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,wDACA,cAAC,EAAD,CACIkB,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAAC7B,KAAML,KACvChB,MAAM,gCACV,iEACA,cAAC,EAAD,CACI6C,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAAC0B,IAAK5D,KACtCyD,aAAc9D,KAAKmC,MAAM8B,IACzBA,IAAK,EACLC,IAAK,MACT,yCACA,cAAC,EAAD,CACIhC,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAAC2B,IAAK7D,KACtCyD,aAAc9D,KAAKmC,MAAM+B,IACzBD,IAAK,EACLC,IAAK,MACT,gDACA,cAAC,EAAD,CACIhC,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAACkC,QAASpE,KAC1ChB,MAAM,2FACV,qCACA,sBACA,cAACwB,EAAA,EAAD,CAAQE,KAAK,KAAKG,QAAS,WAAO,EAAKqC,YAAvC,sBAEJ,uBACCH,S,GA1EoCvB,IAAMC,WCAtC4C,E,kDAEjB,WAAYzE,GAAQ,IAAD,8BACf,cAAMA,IAEDkC,MAAQ,CACTsC,QAAS,EACTE,SAAU,EACV3C,OAAQ,MANG,E,4CAUnB,WACI,IAAMA,EAASC,EAAA,+rBAWYjC,KAAKmC,MAAMsC,QAXvB,oCAYEzE,KAAKmC,MAAMwC,SAZb,qFAcO,GACtB3E,KAAKuC,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFoB,EAFC,OACCpB,EAAShC,KAAKmC,MAAMH,OAW1B,OAPIoB,EADApB,EACS,cAAC,EAAD,CAAgB9B,KAAM8B,EAAO1C,OAAQS,KAAMiC,EAAOqB,eACzCC,IAAXtB,EACE,qBAAKhB,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,kFACA,cAAC,EAAD,CACIkB,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAACkC,QAASpE,EAAGsE,SAAU,KACvDtF,MAAM,2FACV,wCACA,cAAC,EAAD,CAEI6C,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAACoC,SAAUtE,KAC3ChB,MAAK,uLAAkLW,KAAKmC,MAAMsC,QAA7L,MAFA,6BAA+BzE,KAAKmC,MAAMsC,SAGnD,qCACA,sBACA,cAAC5D,EAAA,EAAD,CAAQE,KAAK,KAAKG,QAAS,WAAO,EAAKqC,YAAvC,sBAEJ,uBACCH,S,GA5DoCvB,IAAMC,WCDtC8C,E,kDAEjB,WAAY3E,GAAQ,IAAD,8BACf,cAAMA,IAEDkC,MAAQ,CACTsC,QAAS,EACTzC,OAAQ,MALG,E,4CASnB,WACI,IAAMA,EAASC,EAAA,wPAKcjC,KAAKmC,MAAMsC,QALzB,sMAQ6DzE,KAAKmC,MAAMsC,QARxE,kFAU2B,GAC1CzE,KAAKuC,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFoB,EAFC,OACCpB,EAAShC,KAAKmC,MAAMH,OAW1B,OAPIoB,EADApB,EACS,cAAC,EAAD,CAAgB9B,KAAM8B,EAAO1C,OAAQS,KAAMiC,EAAOqB,eACzCC,IAAXtB,EACE,qBAAKhB,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,wGACA,cAAC,EAAD,CACIkB,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAACkC,QAASpE,KAC1ChB,MAAM,2FACV,qCAEA,mBAAG2B,UAAU,UAAb,wJAEA,cAACH,EAAA,EAAD,CAAQE,KAAK,KAAKG,QAAS,WAAO,EAAKqC,YAAvC,sBAEJ,uBACCH,S,GApDmCvB,IAAMC,WCArC+C,E,kDAEjB,WAAY5E,GAAQ,IAAD,8BACf,cAAMA,IAEDkC,MAAQ,CACT2C,WAAY,EACZ9C,OAAQ,MALG,E,4CASnB,WACI,IAAMA,EAASC,EAAA,qhBAQgBjC,KAAKmC,MAAM2C,WAR3B,+PAaK,GACpB9E,KAAKuC,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFoB,EAFC,OACCpB,EAAShC,KAAKmC,MAAMH,OAW1B,OAPIoB,EADApB,EACS,cAAC,EAAD,CAAgB9B,KAAM8B,EAAO1C,OAAQS,KAAMiC,EAAOqB,eACzCC,IAAXtB,EACE,qBAAKhB,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,8EACA,cAAC,EAAD,CACIkB,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAACuC,WAAYzE,KAC7ChB,MAAM,uDACV,kEAEA,mBAAG2B,UAAU,UAAb,6NAEA,cAACH,EAAA,EAAD,CAAQE,KAAK,KAAKG,QAAS,WAAO,EAAKqC,YAAvC,sBAEJ,uBACCH,S,GAvD2CvB,IAAMC,WCA7CiD,E,kDAEjB,WAAY9E,GAAQ,IAAD,8BACf,cAAMA,IAEDkC,MAAQ,CACT2C,WAAY,EACZ9C,OAAQ,MALG,E,4CASnB,WACI,IAAMA,EAASC,EAAA,sXAMgBjC,KAAKmC,MAAM2C,WAN3B,yHASqC,GACpD9E,KAAKuC,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFoB,EAFC,OACCpB,EAAShC,KAAKmC,MAAMH,OAW1B,OAPIoB,EADApB,EACS,cAAC,EAAD,CAAgB9B,KAAM8B,EAAO1C,OAAQS,KAAMiC,EAAOqB,eACzCC,IAAXtB,EACE,qBAAKhB,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,0FACA,cAAC,EAAD,CACIkB,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAACuC,WAAYzE,KAC7ChB,MAAM,sCACV,qCAEA,mBAAG2B,UAAU,UAAb,iKAEA,cAACH,EAAA,EAAD,CAAQE,KAAK,KAAKG,QAAS,WAAO,EAAKqC,YAAvC,sBAEJ,uBACCH,S,GAnDoCvB,IAAMC,WCAtCkD,E,kDAEjB,WAAY/E,GAAQ,IAAD,8BACf,cAAMA,IAEDkC,MAAQ,CACT2C,WAAY,EACZ9C,OAAQ,MALG,E,4CASnB,WACI,IAAMA,EAASC,EAAA,8MAIejC,KAAKmC,MAAM2C,WAJ1B,oEAMc,GAC7B9E,KAAKuC,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFoB,EAFC,OACCpB,EAAShC,KAAKmC,MAAMH,OAW1B,OAPIoB,EADApB,EACS,cAAC,EAAD,CAAgB9B,KAAM8B,EAAO1C,OAAQS,KAAMiC,EAAOqB,eACzCC,IAAXtB,EACE,qBAAKhB,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,wFACA,cAAC,EAAD,CACIkB,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAACuC,WAAYzE,KAC7ChB,MAAM,sCACV,qCACA,mBAAG2B,UAAU,UAAb,2GACA,cAACH,EAAA,EAAD,CAAQE,KAAK,KAAKG,QAAS,WAAO,EAAKqC,YAAvC,sBAEJ,uBACCH,S,GA9CkCvB,IAAMC,WCApCmD,E,kDAEjB,WAAYhF,GAAQ,IAAD,8BACf,cAAMA,IAEDkC,MAAQ,CACTiB,MAAO,WACPpB,OAAQ,MALG,E,4CASnB,WACI,IAAMA,EAASC,EAAA,wBACMjC,KAAKmC,MAAMiB,MADjB,MAC2B,GAC1CpD,KAAKuC,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFoB,EAFC,OACCpB,EAAShC,KAAKmC,MAAMH,OAW1B,OAPIoB,EADApB,EACS,cAAC,EAAD,CAAgB9B,KAAM8B,EAAO1C,OAAQS,KAAMiC,EAAOqB,eACzCC,IAAXtB,EACE,qBAAKhB,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,0DACA,cAAC,EAAD,CACIkB,SAAU,SAAC7B,GAAO,EAAKkC,SAAS,CAACa,MAAO/C,KACxChB,MAAK,gFACT,0CACA,sBACA,cAACwB,EAAA,EAAD,CAAQE,KAAK,KAAKG,QAAS,WAAO,EAAKqC,YAAvC,sBAEJ,uBACCH,S,GAzC8BvB,IAAMC,WCUhCoD,E,kDAEjB,WAAYjF,GAAQ,IAAD,8BACf,cAAMA,IAEDkC,MAAQ,CACTrE,MAAM,GAGVmE,IAAiBxD,MAAK,WAClB0G,OAAOlD,IAAMA,EACb,EAAKM,SAAS,CAACzE,MAAM,OATV,E,0CAenB,WACI,OAAIkC,KAAKmC,MAAMrE,KAEP,gCACI,cAACsH,EAAA,EAAD,CAAQC,GAAG,OAAO1C,QAAQ,OAA1B,SACI,cAACyC,EAAA,EAAOE,MAAR,0BAEJ,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAMC,iBAAiB,KAAvB,UACI,cAACC,EAAA,EAAD,CAAKzC,SAAS,KAAK0C,MAAM,iBAAzB,SACI,cAAC,EAAD,MAEJ,cAACD,EAAA,EAAD,CAAKzC,SAAS,KAAK0C,MAAM,8BAAzB,SACI,cAAC,EAAD,MAEJ,cAACD,EAAA,EAAD,CAAKzC,SAAS,KAAK0C,MAAM,+BAAzB,SACI,cAAC,EAAD,MAEJ,cAACD,EAAA,EAAD,CAAKzC,SAAS,KAAK0C,MAAM,2BAAzB,SACI,cAAC,EAAD,MAEJ,cAACD,EAAA,EAAD,CAAKzC,SAAS,KAAK0C,MAAM,wBAAzB,SACI,cAAC,EAAD,MAEJ,cAACD,EAAA,EAAD,CAAKzC,SAAS,KAAK0C,MAAM,kBAAzB,SACI,cAAC,EAAD,MAEJ,cAACD,EAAA,EAAD,CAAKzC,SAAS,KAAK0C,MAAM,2BAAzB,SACI,cAAC,EAAD,MAEJ,cAACD,EAAA,EAAD,CAAKzC,SAAS,KAAK0C,MAAM,2BAAzB,SACI,cAAC,EAAD,MAEJ,cAACD,EAAA,EAAD,CAAKzC,SAAS,KAAK0C,MAAM,0BAAzB,SACI,cAAC,EAAD,MAEJ,cAACD,EAAA,EAAD,CAAKzC,SAAS,MAAM0C,MAAM,uBAA1B,SACI,cAAC,EAAD,MAEJ,cAACD,EAAA,EAAD,CAAKzC,SAAS,MAAM0C,MAAM,aAA1B,SACI,cAAC,EAAD,cAQhB,qBAAK3E,UAAU,MAAf,SACI,gF,GAlEaa,IAAMC,WCTvC8D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ecf02d35.chunk.js","sourcesContent":["import initSqlJs from \"sql.js\";\n\nlet db;\nlet init = false;\n\nexport async function initSqlite() {\n    if (init) {\n        console.warn(\"Already initialized.\");\n        return;\n    }\n    \n    try {\n        const sqlPromise = initSqlJs({\n            locateFile: file => `https://sql.js.org/dist/${file}`\n        });\n        const dataPromise = fetch(\"/pokequery.sqlite\").then(res => res.arrayBuffer());\n        const [SQL, buf] = await Promise.all([sqlPromise, dataPromise]);\n        db = new SQL.Database(new Uint8Array(buf));\n        init = true;\n    } catch {\n        console.error(\"Failed to load database file.\");\n    }\n}\n\nexport function isReady() {\n    return init;\n}\n\n//Execute a prepared statement\nexport function execPrepared(query, values) {\n    if (!init) return undefined;\n\n    const statement = db.prepare(query);\n    console.log(statement);\n    return statement.getAsObject(values);\n}\n\n//Execute a unprepared query\nexport function exec(query) {\n    if (!init) return undefined;\n\n    return db.exec(query);\n}\n\n//Execute an unprepared query, ignore return value\nexport function execQuiet(query) {\n    if (!init) return undefined;\n\n    db.run(query);\n}","import React from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { saveAs } from \"file-saver\";\n\n\nexport default class SqlResultTable extends React.Component {\n\n    saveAsCsv() {\n        const cols = this.props.cols;\n        const rows = this.props.rows;\n        let csv = \"\";\n\n        cols.forEach((x) => {\n            csv += x + \",\"\n        });\n\n        csv = csv.slice(0, -1);\n        csv += \"\\n\";\n\n        rows.forEach((r) => {\n            r.forEach((x) => {\n                csv += x + \",\"\n            });\n\n            csv = csv.slice(0, -1);\n            csv += \"\\n\";\n        });\n\n        saveAs(new Blob([csv], {type: \"text/plain;charset=utf-8\"}), \"output.csv\");\n    }\n\n    render() {\n        const cols = this.props.cols;\n        const rows = this.props.rows;\n\n        let downloadBtn;\n\n        if (rows.length > 100000) {\n            downloadBtn = <Button disabled size=\"sm\"><span className=\"italics\">CSV dump unavailable, too large (&gt;100000 rows).</span></Button>\n        } else if (rows.length > 2000) {\n            downloadBtn = <Button color=\"warning\" size=\"sm\" onClick={() => this.saveAsCsv()}>Dump as CSV <span className=\"italics\">(may take up to 30 seconds).</span></Button>\n        } else {\n            downloadBtn = <Button size=\"sm\" onClick={() => this.saveAsCsv()}>Dump as CSV</Button>\n        }\n\n        return (\n            <div className=\"sql-result-table\">\n                <div><p>Got {rows.length} results. {downloadBtn}</p></div>\n                {rows.length > 1500 &&\n                    <p>Warning: Too many rows to display, only first 1500 rows are shown. All rows will be included in CSV dump.</p>\n                }\n                <div className=\"limit\">\n                    <Table striped bordered hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                {cols.map((name, i) => (<td key={i}>{name}</td>))}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {rows.slice(0, 2000).map((row, i) => (\n                                <tr key={i}>\n                                    {row.map((value, i) => (\n                                        <td key={i}>{value}</td>\n                                    ))}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                </div>\n            </div>\n            \n        )\n    }\n}","import React from \"react\";\nimport * as sql from \"../SqlApi\";\nimport { Dropdown } from \"react-bootstrap\";\n\nexport default class QueryOptionsDropdown extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        const query = this.props.query;\n        const result = sql.exec(query)[0];\n        this.props.onChange(result.values[0][0]); //set the default value internally\n        this.state = {\n            options: result.values,\n            selectedOption: result.values[0][0],\n            onChange: this.props.onChange\n        }\n    }\n\n    setValue(key) {\n        this.setState({selectedOption: key});\n        this.props.onChange(key);\n    }\n\n    render() {\n        const options = this.state.options;\n        const selectedOption = options.filter(x => x[0] === this.state.selectedOption)[0];\n\n        return (\n            <Dropdown className=\"query-dropdown\">\n                <Dropdown.Toggle size=\"sm\" variant=\"success\" id=\"dropdown-basic\">\n                    {selectedOption[1]}\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu>\n                    {options.map((x, i) => (\n                        <Dropdown.Item active={selectedOption[0] === x[0]} onClick={() => {this.setValue(x[0])}} key={i} eventKey={i}>{x[1]}</Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\n\nexport default class Q1PokedexLookup extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pokedex: 1,\n            result: null\n        }\n    }\n\n    runQuery() {\n        console.log(this.state.pokedex);\n        const result = sql.exec(\n            `select distinct pokedex_number \"Dex Number\", ps.name Name, genus Genus, group_concat(t.name, \"; \") \"Types\", ps.generation_id Gen\n            from pokemon p\n            left join pokemon_species ps on p.species_id = ps.id\n            left join pokemon_dex_numbers pdn on ps.id = pdn.species_id\n            left join pokemon_types pt on p.id = pt.pokemon_id\n            left join types t on pt.type_id = t.id\n            where pdn.pokedex_id = ${this.state.pokedex}\n            group by p.id\n            order by pokedex_number;`)[0];\n        this.setState({result: result});  \n    }\n\n    render() {\n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show all Pokemon in the</span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({pokedex: x})}} \n                        query=\"select id, name from pokedexes;\"/> \n                    <span>Pokedex.</span>\n                    <p/>\n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\n\nexport default class Q2MoveAilmentLookup extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            type: 1,\n            ailment: 1,\n            result: null\n        }\n    }\n\n    runQuery() {\n        const result = sql.exec(\n            `select distinct ps.name Pokemon, m.name Move, CASE WHEN m.ailment_chance = 0 THEN 100 ELSE m.ailment_chance END || '%' \"Success Chance\"\n            from pokemon p\n            left join pokemon_species ps on p.species_id = ps.id\n            left join pokemon_moves pm on p.id = pm.pokemon_id\n            left join moves m on pm.move_id = m.id\n            left join ailments a on m.ailment_id = a.id\n            left join types t on m.type_id = t.id\n            where m.type_id = ${this.state.type}\n            and a.id = ${this.state.ailment}\n            order by m.id;`)[0];\n        this.setState({result: result});  \n    }\n\n    render() {\n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show all Pokemon that can learn a </span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({type: x})}} \n                        query=\"select id, name from types;\"/> \n                    <span>type move which inflicts the </span>\n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({ailment: x})}} \n                        query=\"select a.id, a.name from ailments a where a.id in (select distinct m.ailment_id from moves m where m.ailment_id not null and m.ailment_id > 0)\"/> \n                    <span>ailment.</span>\n                    <p/>\n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\n\nexport default class Q3MoveStatChangeLookup extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            type: 1,\n            stat: 1,\n            target: 1,\n            result: null\n        }\n    }\n\n    runQuery() {\n        const result = sql.exec(\n            `select distinct ps.name Pokemon, m.name Move, CASE WHEN m.stat_chance = 0 THEN 100 ELSE m.stat_chance END || '%' \"Success Chance\", msc.change \"Stat Change\"\n            from pokemon p\n            left join pokemon_species ps on p.species_id = ps.id\n            left join pokemon_moves pm on p.id = pm.pokemon_id\n            left join moves m on pm.move_id = m.id\n            left join move_stat_changes msc on m.id = msc.move_id\n            left join stats s on msc.stat_id = s.id\n            left join move_targets mt on m.target_id = mt.id\n            where m.type_id = ${this.state.type}\n            and mt.id = ${this.state.target}\n            and s.id = ${this.state.stat}\n            and msc.change not null;`)[0];\n        this.setState({result: result});  \n    }\n\n    render() {\n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show all Pokemon that can learn a </span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({type: x})}} \n                        query=\"select id, name from types;\"/> \n                    <span>type move which affects the </span>\n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({stat: x})}} \n                        query=\"select s.id, s.name from stats s where s.id in (select distinct stat_id from moves m left join move_stat_changes msc on m.id = msc.move_id where msc.stat_id not null);\"/> \n                    <span>stat and targets </span>\n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({target: x})}} \n                        query=\"select mt.id, mt.name from move_targets mt where mt.id in (select distinct target_id from moves m left join move_stat_changes msc on m.id = msc.move_id where msc.stat_id not null);\"/> \n                    <span>.</span>\n                    <p/>\n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nexport default class NudOption extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: this.props.initialValue\n        }\n    }\n\n    setValue(val) {\n        val = Math.min(this.props.max, Math.max(this.props.min, val.target.value));\n        this.setState({value: val});\n        this.props.onChange(val);\n    }\n\n    render() {\n        return (\n            <div className=\"nud-input\">\n                <Form.Control size=\"sm\" type=\"number\" min={this.props.min} max={this.props.max} value={this.state.value} onChange={(x) => this.setValue(x)} />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\nimport NudOption from './NudOption';\n\nexport default class Q4EffectiveMoveLookup extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            type: 1,\n            pp: 5,\n            accuracy: 50,\n            result: null\n        }\n    }\n\n    runQuery() {\n        const result = sql.exec(\n            `select m.name \"Move\", tsrc.name \"Type\", m.pp \"PP\", m.accuracy || '%' \"Accuracy\"\n            from moves m\n            left join type_efficacy te on m.type_id = te.source_type_id\n            left join types tsrc on te.source_type_id = tsrc.id\n            left join types tdest on te.target_type_id = tdest.id\n            where damage_factor > 100\n            and tdest.id = ${this.state.type}\n            and m.pp >= ${this.state.pp}\n            and m.accuracy >= ${this.state.accuracy};`)[0];\n        this.setState({result: result});  \n    }\n\n    render() { \n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show all moves that are super effective against </span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({type: x})}} \n                        query=\"select id, name from types;\"/> \n                    <span> type Pokemon with a PP of at least </span>\n                    <NudOption \n                        onChange={(x) => {this.setState({pp: x})}} \n                        initialValue={this.state.pp}\n                        min={0}\n                        max={40}/> \n                    <span> and an accuracy of at least </span>\n                    <NudOption \n                        onChange={(x) => {this.setState({accuracy: x})}} \n                        initialValue={this.state.accuracy}\n                        min={0}\n                        max={100}/> \n                    <span> percent.</span>\n                    <p/>\n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\nimport NudOption from './NudOption';\n\nexport default class Q5PokemonEcounterLookup extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            version: 1,\n            type: 1,\n            min: 1,\n            max: 100,\n            result: null\n        }\n    }\n\n    runQuery() {\n        const result = sql.exec(\n            `select * from \n            (select distinct ps.name \"Pokemon\", l.name \"Location\", v.name \"Game\", min(e.min_level) \"Min Level\", max(e.max_level) \"Max Level\" \n            from encounters e\n            left join pokemon p on e.pokemon_id = p.id\n            left join pokemon_species ps on p.species_id = ps.id\n            left join pokemon_types pt on p.id = pt.pokemon_id\n            left join versions v on e.version_id = v.id\n            left join location_areas la on e.location_area_id = la.id\n            left join locations l on la.location_id = l.id\n            where v.id = ${this.state.version}\n            and pt.type_id = ${this.state.type}\n            group by p.id, l.id\n            order by e.location_area_id)\n            where \"Max Level\" >= ${this.state.min}\n            and \"Min Level\" <= ${this.state.max};`)[0];\n        this.setState({result: result});  \n    }\n\n    render() { \n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show where to catch </span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({type: x})}} \n                        query=\"select id, name from types;\"/> \n                    <span> type Pokemon between levels </span>\n                    <NudOption \n                        onChange={(x) => {this.setState({min: x})}} \n                        initialValue={this.state.min}\n                        min={0}\n                        max={100}/> \n                    <span> and </span>\n                    <NudOption \n                        onChange={(x) => {this.setState({max: x})}} \n                        initialValue={this.state.max}\n                        min={0}\n                        max={100}/> \n                    <span> in Pokemon </span>\n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({version: x})}} \n                        query=\"select id, name from versions v where v.id in (select e.version_id from encounters e);\"/> \n                    <span>.</span>\n                    <p/>\n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\nimport NudOption from './NudOption';\n\nexport default class Q6LocationPokemonLookup extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            version: 1,\n            location: 1,\n            result: null\n        }\n    }\n\n    runQuery() {\n        const result = sql.exec(\n            `select ps.name \"Pokemon\", types \"Types\", l.name \"Location\", min(e.min_level) \"Min Level\", max(e.max_level) \"Max Level\" from encounters e\n            left join (\n                select p.id id, ps.name name, group_concat(t.name, \", \") types from pokemon p\n                left join pokemon_species ps on p.species_id = ps.id\n                left join pokemon_types pt on p.id = pt.pokemon_id\n                left join types t on pt.type_id = t.id\n                group by p.id\n                ) ps on e.pokemon_id = ps.id\n            left join location_areas la on e.location_area_id = la.id\n            left join locations l on la.location_id = l.id\n            where e.version_id = ${this.state.version}\n            and l.id = ${this.state.location}\n            group by e.pokemon_id, la.location_id\n            order by la.id;`)[0];\n        this.setState({result: result});  \n    }\n\n    render() { \n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show which Pokemon can be obtained in Pokemon </span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({version: x, location: 1})}} \n                        query=\"select id, name from versions v where v.id in (select e.version_id from encounters e);\"/> \n                    <span> at </span>\n                    <QueryOptionsDropdown \n                        key={\"q6-location-dropdown-pkmn-\" + this.state.version}\n                        onChange={(x) => {this.setState({location: x})}} \n                        query={`select distinct l.id, l.name from encounters e left join location_areas la on e.location_area_id = la.id left join locations l on la.location_id = l.id where e.version_id = ${this.state.version};`}/> \n                    <span>.</span>\n                    <p/>\n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\n\nexport default class Q7PopularPokemonLookup extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            version: 1,\n            result: null\n        }\n    }\n\n    runQuery() {\n        const result = sql.exec(\n            `select ps.name, count(*) \"Possible Locations\" from pokemon p\n            left join (\n                select distinct e2.pokemon_id \"pid\", e2.location_area_id \"lid\"\n                from encounters e2\n                where version_id = ${this.state.version}\n                ) e on p.id = e.pid\n            left join pokemon_species ps on p.species_id = ps.id\n            where p.id in (select pokemon_id from encounters e where version_id = ${this.state.version})\n            group by p.id\n            order by \"Possible Locations\" desc;`)[0];\n        this.setState({result: result});  \n    }\n\n    render() { \n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show how many locations each Pokemon can be encounted at in Pokemon </span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({version: x})}} \n                        query=\"select id, name from versions v where v.id in (select e.version_id from encounters e);\"/> \n                    <span>.</span>\n\n                    <p className='italics'>In this context, a \"location\" may be a specific patch of grass, a specific fishing pond, a specific building with an NPC interaction, etc.</p>\n                    \n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\n\nexport default class Q8MultiGenerationPokemonLookup extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            generation: 1,\n            result: null\n        }\n    }\n\n    runQuery() {\n        const result = sql.exec(\n            `select name \"Pokemon\", group_concat(gid, \", \") \"Also Available in Generations\" from\n            (select distinct p.id \"pid\", g.id \"gid\", ps.name \"name\" from encounters e\n            left join pokemon p on e.pokemon_id = p.id\n            left join pokemon_species ps on p.species_id = ps.id\n            left join versions v on e.version_id = v.id\n            left join version_groups vg on v.version_group_id = vg.id\n            left join generations g on vg.generation_id = g.id\n            where ps.generation_id = ${this.state.generation}\n            except\n                select distinct p2.id \"pid\", ps2.generation_id \"gid\", ps2.name \"name\" from pokemon p2\n                left join pokemon_species ps2 on p2.species_id = ps2.id)\n            group by pid\n            order by pid;`)[0];\n        this.setState({result: result});  \n    }\n\n    render() { \n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show which other generations Pokemon from </span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({generation: x})}} \n                        query=\"select id, name from generations g where g.id < 6;\"/> \n                    <span> can be naturally obtained in.</span>\n\n                    <p className='italics'>In this context, \"naturally obtained\" means can be encountered in the game without trading or special events. Some special locations are excluded (ex. Mirage Island). Data from Generation 7+ is not included.</p>\n                    \n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\n\nexport default class Q9PokemonTypePopularity extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            generation: 1,\n            result: null\n        }\n    }\n\n    runQuery() {\n        const result = sql.exec(\n            `select t.name \"Pokemon\", count(*) \"Number of Pokemon Introduced\" from pokemon p\n            left join pokemon_species ps on p.species_id = ps.id\n            left join generations g on ps.generation_id = g.id\n            left join pokemon_types pt on p.id = pt.pokemon_id\n            left join types t on pt.type_id = t.id\n            where ps.generation_id = ${this.state.generation}\n            and p.id < 10000\n            group by t.id\n            order by \"Number of Pokemon Introduced\" desc;`)[0];\n        this.setState({result: result});  \n    }\n\n    render() { \n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show the number of Pokemon of each type introduced in </span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({generation: x})}} \n                        query=\"select id, name from generations;\"/> \n                    <span>.</span>\n\n                    <p className='italics'>In situations where Pokemon typings have changed (ex. Fairy type), the newest type data is used. Forms (Megas, Alolan, Galarian, etc) are excluded.</p>\n                    \n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\n\nexport default class Q10MoveTypePopularity extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            generation: 1,\n            result: null\n        }\n    }\n\n    runQuery() {\n        const result = sql.exec(\n            `select t.name, count(*) \"Count\" from moves m\n            left join generations g on m.generation_id = g.id\n            left join types t on m.type_id = t.id\n            where m.generation_id = ${this.state.generation}\n            group by t.id\n            order by \"Count\" desc;`)[0];\n        this.setState({result: result});  \n    }\n\n    render() { \n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show the number of moves of each type introduced in </span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({generation: x})}} \n                        query=\"select id, name from generations;\"/> \n                    <span>.</span>\n                    <p className='italics'>In situations where move typings have changed (ex. Fairy type), the newest type data is used.</p>                    \n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\n\nexport default class QEXRawTableLookup extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            table: \"ailments\",\n            result: null\n        }\n    }\n\n    runQuery() {\n        const result = sql.exec(\n            `select * from ${this.state.table};`)[0];\n        this.setState({result: result});  \n    }\n\n    render() { \n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show all data for the </span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({table: x})}} \n                        query={`select distinct tbl_name, tbl_name from sqlite_master where type = \"table\";`}/> \n                    <span>table.</span>\n                    <p/>                    \n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import './App.css';\nimport React from 'react';\nimport * as sql from './SqlApi';\nimport Q1PokedexLookup from './components/Q1PokedexLookup';\nimport { Container, Navbar, Tabs, Tab } from 'react-bootstrap';\nimport Q2MoveAilmentLookup from './components/Q2MoveAilmentLookup';\nimport Q3MoveStatChangeLookup from './components/Q3MoveStatChangeLookup';\nimport Q4EffectiveMoveLookup from './components/Q4EffectiveMoveLookup';\nimport Q5PokemonEcounterLookup from './components/Q5PokemonEcounterLookup';\nimport Q6LocationPokemonLookup from './components/Q6LocationPokemonLookup';\nimport Q7PopularPokemonLookup from './components/Q7PopularPokemonLookup';\nimport Q8MultiGenerationPokemonLookup from './components/Q8MultiGenerationPokemonLookup';\nimport Q9PokemonTypePopularity from './components/Q9PokemonTypePopularity';\nimport Q10MoveTypePopularity from './components/Q10MoveTypePopularity';\nimport QEXRawTableLookup from './components/QEXRawTableLookup';\n\nexport default class App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            init: false\n        }\n\n        sql.initSqlite().then(() => {\n            window.sql = sql;\n            this.setState({init: true});\n        });\n    }\n\n    \n\n    render() {\n        if (this.state.init) {\n            return (\n                <div>\n                    <Navbar bg=\"dark\" variant=\"dark\">\n                        <Navbar.Brand>PokeQuery</Navbar.Brand>\n                    </Navbar>\n                    <Container>\n                        <Tabs defaultActiveKey=\"q1\">\n                            <Tab eventKey=\"q1\" title=\"Pokedex Lookup\">\n                                <Q1PokedexLookup/>\n                            </Tab>\n                            <Tab eventKey=\"q5\" title=\"Encounter Lookup by Pokemon\">\n                                <Q5PokemonEcounterLookup/>\n                            </Tab>\n                            <Tab eventKey=\"q6\" title=\"Encounter Lookup by Location\">\n                                <Q6LocationPokemonLookup/>\n                            </Tab>\n                            <Tab eventKey=\"q2\" title=\"Pokemon Moves by Ailment\">\n                                <Q2MoveAilmentLookup/>\n                            </Tab>\n                            <Tab eventKey=\"q3\" title=\"Pokemon Moves by Stat\">\n                                <Q3MoveStatChangeLookup/>\n                            </Tab>\n                            <Tab eventKey=\"q4\" title=\"Effective Moves\">\n                                <Q4EffectiveMoveLookup/>\n                            </Tab>\n                            <Tab eventKey=\"q7\" title=\"Pokemon Encounter Rarity\">\n                                <Q7PopularPokemonLookup/>\n                            </Tab>\n                            <Tab eventKey=\"q8\" title=\"Pokemon Alt. Generations\">\n                                <Q8MultiGenerationPokemonLookup/>\n                            </Tab>\n                            <Tab eventKey=\"q9\" title=\"Pokemon Type Popularity\">\n                                <Q9PokemonTypePopularity/>\n                            </Tab>\n                            <Tab eventKey=\"q10\" title=\"Move Type Popularity\">\n                                <Q10MoveTypePopularity/>\n                            </Tab>\n                            <Tab eventKey=\"qex\" title=\"Raw Tables\">\n                                <QEXRawTableLookup/>\n                            </Tab>\n                        </Tabs>\n                    </Container>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"App\">\n                    <p>Please wait while we load the database...</p>\n                </div>\n            );\n        }\n    }\n}","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}