{"version":3,"sources":["SqlApi.js","components/SqlResultTable.js","components/QueryOptionsDropdown.js","components/Q1PokedexLookup.js","components/Q2MoveAilmentLookup.js","components/Q3MoveStatChangeLookup.js","components/NudOption.js","components/Q4EffectiveMoveLookup.js","components/Q5PokemonEcounterLookup.js","App.js","index.js"],"names":["db","init","initSqlite","a","console","warn","sqlPromise","initSqlJs","locateFile","file","dataPromise","fetch","then","res","arrayBuffer","Promise","all","SQL","buf","Database","Uint8Array","error","isReady","execPrepared","query","values","statement","prepare","log","getAsObject","exec","execQuiet","run","SqlResultTable","cols","this","props","rows","className","length","Table","striped","bordered","hover","size","map","name","i","row","value","React","Component","QueryOptionsDropdown","result","sql","state","options","selectedOption","onChange","key","setState","filter","x","Dropdown","Toggle","variant","id","Menu","Item","active","onClick","setValue","eventKey","Q1PokedexLookup","pokedex","table","columns","undefined","Button","runQuery","Q2MoveAilmentLookup","type","ailment","Q3MoveStatChangeLookup","stat","target","NudOption","initialValue","val","Math","min","max","Form","Control","Q4EffectiveMoveLookup","pp","accuracy","Q5PokemonEcounterLookup","version","App","window","Navbar","bg","Brand","Container","Tabs","defaultActiveKey","Tab","title","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6pBAEIA,E,uIACAC,GAAO,EAEJ,SAAeC,IAAtB,+B,4CAAO,sCAAAC,EAAA,0DACCF,EADD,uBAECG,QAAQC,KAAK,wBAFd,0CAOOC,EAAaC,IAAU,CACzBC,WAAY,SAAAC,GAAI,wCAA+BA,MAE7CC,EAAcC,MAAM,qBAAqBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,iBAVhE,SAW0BC,QAAQC,IAAI,CAACV,EAAYI,IAXnD,mCAWQO,EAXR,KAWaC,EAXb,KAYClB,EAAK,IAAIiB,EAAIE,SAAS,IAAIC,WAAWF,IACrCjB,GAAO,EAbR,kDAeCG,QAAQiB,MAAM,iCAff,2D,sBAmBA,SAASC,IACZ,OAAOrB,EAIJ,SAASsB,EAAaC,EAAOC,GAChC,GAAKxB,EAAL,CAEA,IAAMyB,EAAY1B,EAAG2B,QAAQH,GAE7B,OADApB,QAAQwB,IAAIF,GACLA,EAAUG,YAAYJ,IAI1B,SAASK,EAAKN,GACjB,GAAKvB,EAEL,OAAOD,EAAG8B,KAAKN,GAIZ,SAASO,EAAUP,GACjBvB,GAELD,EAAGgC,IAAIR,G,oBC5CUS,E,4JAEjB,WACI,IAAMC,EAAOC,KAAKC,MAAMF,KAClBG,EAAOF,KAAKC,MAAMC,KACxB,OACI,sBAAKC,UAAU,mBAAf,UACI,8BAAK,qCAAQD,EAAKE,OAAb,iBACL,qBAAKD,UAAU,QAAf,SACI,eAACE,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAnC,UACI,gCACI,6BACKV,EAAKW,KAAI,SAACC,EAAMC,GAAP,OAAc,6BAAaD,GAAJC,UAGzC,gCACKV,EAAKQ,KAAI,SAACG,EAAKD,GAAN,OACN,6BACKC,EAAIH,KAAI,SAACI,EAAOF,GAAR,OACL,6BAAaE,GAAJF,OAFRA,oB,GAjBGG,IAAMC,W,kBCA7BC,E,kDACjB,WAAYhB,GAAQ,IAAD,sBAGf,IACMiB,EAASC,GAHf,cAAMlB,IAEaA,MAAMZ,OACM,GAJhB,OAKf,EAAK+B,MAAQ,CACTC,QAASH,EAAO5B,OAChBgC,eAAgBJ,EAAO5B,OAAO,GAAG,GACjCiC,SAAU,EAAKtB,MAAMsB,UARV,E,4CAYnB,SAASC,GACLxB,KAAKyB,SAAS,CAACH,eAAgBE,IAC/BxB,KAAKC,MAAMsB,SAASC,K,oBAGxB,WAAU,IAAD,OACCH,EAAUrB,KAAKoB,MAAMC,QACrBC,EAAiBD,EAAQK,QAAO,SAAAC,GAAC,OAAIA,EAAE,KAAO,EAAKP,MAAME,kBAAgB,GAE/E,OACI,eAACM,EAAA,EAAD,CAAUzB,UAAU,iBAApB,UACI,cAACyB,EAAA,EAASC,OAAV,CAAiBpB,KAAK,KAAKqB,QAAQ,UAAUC,GAAG,iBAAhD,SACKT,EAAe,KAGpB,cAACM,EAAA,EAASI,KAAV,UACKX,EAAQX,KAAI,SAACiB,EAAGf,GAAJ,OACT,cAACgB,EAAA,EAASK,KAAV,CAAeC,OAAQZ,EAAe,KAAOK,EAAE,GAAIQ,QAAS,WAAO,EAAKC,SAAST,EAAE,KAAcU,SAAUzB,EAA3G,SAA+Ge,EAAE,IAAnBf,e,GA9BpEG,IAAMC,WCEnCsB,E,kDAEjB,WAAYrC,GAAQ,IAAD,8BACf,cAAMA,IAEDmB,MAAQ,CACTmB,QAAS,EACTrB,OAAQ,MALG,E,4CASnB,WACIjD,QAAQwB,IAAIO,KAAKoB,MAAMmB,SACvB,IAAMrB,EAASC,EAAA,kUAKcnB,KAAKoB,MAAMmB,QALzB,4BAK2D,GAC1EvC,KAAKyB,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFsB,EAFC,OACCtB,EAASlB,KAAKoB,MAAMF,OAW1B,OAPIsB,EADAtB,EACS,cAAC,EAAD,CAAgBhB,KAAMgB,EAAO5B,OAAQS,KAAMmB,EAAOuB,eACzCC,IAAXxB,EACE,qBAAKf,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,2DACA,cAAC,EAAD,CACIoB,SAAU,SAACI,GAAO,EAAKF,SAAS,CAACc,QAASZ,KAC1CtC,MAAM,oCACV,4CAEA,cAACsD,EAAA,EAAD,CAAQlC,KAAK,KAAK0B,QAAS,WAAO,EAAKS,YAAvC,sBAEJ,uBACCJ,S,GA9C4BzB,IAAMC,W,oCCA9B6B,E,kDAEjB,WAAY5C,GAAQ,IAAD,8BACf,cAAMA,IAEDmB,MAAQ,CACT0B,KAAM,EACNC,QAAS,EACT7B,OAAQ,MANG,E,4CAUnB,WACI,IAAMA,EAASC,EAAA,gcAQSnB,KAAKoB,MAAM0B,KARpB,oCASE9C,KAAKoB,MAAM2B,QATb,uEAWM,GACrB/C,KAAKyB,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFsB,EAFC,OACCtB,EAASlB,KAAKoB,MAAMF,OAW1B,OAPIsB,EADAtB,EACS,cAAC,EAAD,CAAgBhB,KAAMgB,EAAO5B,OAAQS,KAAMmB,EAAOuB,eACzCC,IAAXxB,EACE,qBAAKf,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,sEACA,cAAC,EAAD,CACIoB,SAAU,SAACI,GAAO,EAAKF,SAAS,CAACqB,KAAMnB,KACvCtC,MAAM,gCACV,iEACA,cAAC,EAAD,CACIkC,SAAU,SAACI,GAAO,EAAKF,SAAS,CAACsB,QAASpB,KAC1CtC,MAAM,mCACV,4CAEA,cAACsD,EAAA,EAAD,CAAQlC,KAAK,KAAK0B,QAAS,WAAO,EAAKS,YAAvC,sBAEJ,uBACCJ,S,GAxDgCzB,IAAMC,WCAlCgC,E,kDAEjB,WAAY/C,GAAQ,IAAD,8BACf,cAAMA,IAEDmB,MAAQ,CACT0B,KAAM,EACNG,KAAM,EACNC,OAAQ,EACRhC,OAAQ,MAPG,E,4CAWnB,WACI,IAAMA,EAASC,EAAA,iiBASSnB,KAAKoB,MAAM0B,KATpB,qCAUG9C,KAAKoB,MAAM8B,OAVd,oCAWElD,KAAKoB,MAAM6B,KAXb,yCAYc,GAC7BjD,KAAKyB,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFsB,EAFC,OACCtB,EAASlB,KAAKoB,MAAMF,OAW1B,OAPIsB,EADAtB,EACS,cAAC,EAAD,CAAgBhB,KAAMgB,EAAO5B,OAAQS,KAAMmB,EAAOuB,eACzCC,IAAXxB,EACE,qBAAKf,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,sEACA,cAAC,EAAD,CACIoB,SAAU,SAACI,GAAO,EAAKF,SAAS,CAACqB,KAAMnB,KACvCtC,MAAM,gCACV,gEACA,cAAC,EAAD,CACIkC,SAAU,SAACI,GAAO,EAAKF,SAAS,CAACwB,KAAMtB,KACvCtC,MAAM,gCACV,qDACA,cAAC,EAAD,CACIkC,SAAU,SAACI,GAAO,EAAKF,SAAS,CAACyB,OAAQvB,KACzCtC,MAAM,uCACV,qCAEA,cAACsD,EAAA,EAAD,CAAQlC,KAAK,KAAK0B,QAAS,WAAO,EAAKS,YAAvC,sBAEJ,uBACCJ,S,GA9DmCzB,IAAMC,W,SCHrCmC,E,kDACjB,WAAYlD,GAAQ,IAAD,8BACf,cAAMA,IAEDmB,MAAQ,CACTN,MAAO,EAAKb,MAAMmD,cAJP,E,4CAQnB,SAASC,GACLA,EAAMC,KAAKC,IAAIvD,KAAKC,MAAMuD,IAAKF,KAAKE,IAAIxD,KAAKC,MAAMsD,IAAKF,EAAIH,OAAOpC,QACnEd,KAAKyB,SAAS,CAACX,MAAOuC,IACtBrD,KAAKC,MAAMsB,SAAS8B,K,oBAGxB,WAAU,IAAD,OACL,OACI,qBAAKlD,UAAU,YAAf,SACI,cAACsD,EAAA,EAAKC,QAAN,CAAcjD,KAAK,KAAKqC,KAAK,SAASS,IAAKvD,KAAKC,MAAMsD,IAAKC,IAAKxD,KAAKC,MAAMuD,IAAK1C,MAAOd,KAAKoB,MAAMN,MAAOS,SAAU,SAACI,GAAD,OAAO,EAAKS,SAAST,Y,GAlBjHZ,IAAMC,WCIxB2C,E,kDAEjB,WAAY1D,GAAQ,IAAD,8BACf,cAAMA,IAEDmB,MAAQ,CACT0B,KAAM,EACNc,GAAI,EACJC,SAAU,GACV3C,OAAQ,MAPG,E,4CAWnB,WACI,IAAMA,EAASC,EAAA,sYAOMnB,KAAKoB,MAAM0B,KAPjB,qCAQG9C,KAAKoB,MAAMwC,GARd,2CASS5D,KAAKoB,MAAMyC,SATpB,MASiC,GAChD7D,KAAKyB,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFsB,EAFC,OACCtB,EAASlB,KAAKoB,MAAMF,OAW1B,OAPIsB,EADAtB,EACS,cAAC,EAAD,CAAgBhB,KAAMgB,EAAO5B,OAAQS,KAAMmB,EAAOuB,eACzCC,IAAXxB,EACE,qBAAKf,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,oFACA,cAAC,EAAD,CACIoB,SAAU,SAACI,GAAO,EAAKF,SAAS,CAACqB,KAAMnB,KACvCtC,MAAM,gCACV,wEACA,cAAC,EAAD,CACIkC,SAAU,SAACI,GAAO,EAAKF,SAAS,CAACmC,GAAIjC,KACrCyB,aAAcpD,KAAKoB,MAAMwC,GACzBL,IAAK,EACLC,IAAK,KACT,iEACA,cAAC,EAAD,CACIjC,SAAU,SAACI,GAAO,EAAKF,SAAS,CAACoC,SAAUlC,KAC3CyB,aAAcpD,KAAKoB,MAAMyC,SACzBN,IAAK,EACLC,IAAK,MACT,6CAEA,cAACb,EAAA,EAAD,CAAQlC,KAAK,KAAK0B,QAAS,WAAO,EAAKS,YAAvC,sBAEJ,uBACCJ,S,GA/DkCzB,IAAMC,WCApC8C,E,kDAEjB,WAAY7D,GAAQ,IAAD,8BACf,cAAMA,IAEDmB,MAAQ,CACT2C,QAAS,EACTjB,KAAM,EACNS,IAAK,EACLC,IAAK,IACLtC,OAAQ,MARG,E,4CAYnB,WACI,IAAMA,EAASC,EAAA,ulBAUInB,KAAKoB,MAAM2C,QAVf,0CAWQ/D,KAAKoB,MAAM0B,KAXnB,yHAcY9C,KAAKoB,MAAMmC,IAdvB,4CAeUvD,KAAKoB,MAAMoC,IAfrB,MAe6B,GAC5CxD,KAAKyB,SAAS,CAACP,OAAQA,M,oBAG3B,WAAU,IAEFsB,EAFC,OACCtB,EAASlB,KAAKoB,MAAMF,OAW1B,OAPIsB,EADAtB,EACS,cAAC,EAAD,CAAgBhB,KAAMgB,EAAO5B,OAAQS,KAAMmB,EAAOuB,eACzCC,IAAXxB,EACE,qBAAKf,UAAU,mBAAf,SAAkC,iDAElC,qBAAKA,UAAU,mBAAf,SAAkC,4DAI3C,gCACI,sBAAKA,UAAU,oBAAf,UACI,wDACA,cAAC,EAAD,CACIoB,SAAU,SAACI,GAAO,EAAKF,SAAS,CAACqB,KAAMnB,KACvCtC,MAAM,gCACV,iEACA,cAAC,EAAD,CACIkC,SAAU,SAACI,GAAO,EAAKF,SAAS,CAAC8B,IAAK5B,KACtCyB,aAAcpD,KAAKoB,MAAMmC,IACzBA,IAAK,EACLC,IAAK,MACT,yCACA,cAAC,EAAD,CACIjC,SAAU,SAACI,GAAO,EAAKF,SAAS,CAAC+B,IAAK7B,KACtCyB,aAAcpD,KAAKoB,MAAMoC,IACzBD,IAAK,EACLC,IAAK,MACT,gDACA,cAAC,EAAD,CACIjC,SAAU,SAACI,GAAO,EAAKF,SAAS,CAACsC,QAASpC,KAC1CtC,MAAM,2FACV,qCAEA,cAACsD,EAAA,EAAD,CAAQlC,KAAK,KAAK0B,QAAS,WAAO,EAAKS,YAAvC,sBAEJ,uBACCJ,S,GA1EoCzB,IAAMC,WCGtCgD,E,kDAEjB,WAAY/D,GAAQ,IAAD,8BACf,cAAMA,IAEDmB,MAAQ,CACTtD,MAAM,GAGVqD,IAAiB1C,MAAK,WAClBwF,OAAO9C,IAAMA,EACb,EAAKM,SAAS,CAAC3D,MAAM,OATV,E,0CAenB,WACI,OAAIkC,KAAKoB,MAAMtD,KAEP,gCACI,cAACoG,EAAA,EAAD,CAAQC,GAAG,OAAOrC,QAAQ,OAA1B,SACI,cAACoC,EAAA,EAAOE,MAAR,0BAEJ,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAMC,iBAAiB,KAAvB,UACI,cAACC,EAAA,EAAD,CAAKnC,SAAS,KAAKoC,MAAM,iBAAzB,SACI,cAAC,EAAD,MAEJ,cAACD,EAAA,EAAD,CAAKnC,SAAS,KAAKoC,MAAM,8BAAzB,SACI,cAAC,EAAD,MAEJ,cAACD,EAAA,EAAD,CAAKnC,SAAS,KAAKoC,MAAM,2BAAzB,SACI,cAAC,EAAD,MAEJ,cAACD,EAAA,EAAD,CAAKnC,SAAS,KAAKoC,MAAM,wBAAzB,SACI,cAAC,EAAD,MAEJ,cAACD,EAAA,EAAD,CAAKnC,SAAS,KAAKoC,MAAM,2BAAzB,SACI,cAAC,EAAD,cAQhB,qBAAKtE,UAAU,MAAf,SACI,gF,GAhDaY,IAAMC,WCHvC0D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.15b0bbb3.chunk.js","sourcesContent":["import initSqlJs from \"sql.js\";\n\nlet db;\nlet init = false;\n\nexport async function initSqlite() {\n    if (init) {\n        console.warn(\"Already initialized.\");\n        return;\n    }\n    \n    try {\n        const sqlPromise = initSqlJs({\n            locateFile: file => `https://sql.js.org/dist/${file}`\n        });\n        const dataPromise = fetch(\"/pokequery.sqlite\").then(res => res.arrayBuffer());\n        const [SQL, buf] = await Promise.all([sqlPromise, dataPromise]);\n        db = new SQL.Database(new Uint8Array(buf));\n        init = true;\n    } catch {\n        console.error(\"Failed to load database file.\");\n    }\n}\n\nexport function isReady() {\n    return init;\n}\n\n//Execute a prepared statement\nexport function execPrepared(query, values) {\n    if (!init) return undefined;\n\n    const statement = db.prepare(query);\n    console.log(statement);\n    return statement.getAsObject(values);\n}\n\n//Execute a unprepared query\nexport function exec(query) {\n    if (!init) return undefined;\n\n    return db.exec(query);\n}\n\n//Execute an unprepared query, ignore return value\nexport function execQuiet(query) {\n    if (!init) return undefined;\n\n    db.run(query);\n}","import React from \"react\";\nimport { Table } from \"react-bootstrap\";\n\n\nexport default class SqlResultTable extends React.Component {\n\n    render() {\n        const cols = this.props.cols;\n        const rows = this.props.rows;\n        return (\n            <div className=\"sql-result-table\">\n                <div><p>Got {rows.length} results.</p></div>\n                <div className=\"limit\">\n                    <Table striped bordered hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                {cols.map((name, i) => (<td key={i}>{name}</td>))}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {rows.map((row, i) => (\n                                <tr key={i}>\n                                    {row.map((value, i) => (\n                                        <td key={i}>{value}</td>\n                                    ))}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                </div>\n            </div>\n            \n        )\n    }\n}","import React from \"react\";\nimport * as sql from \"../SqlApi\";\nimport { Dropdown } from \"react-bootstrap\";\n\nexport default class QueryOptionsDropdown extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        const query = this.props.query;\n        const result = sql.exec(query)[0];\n        this.state = {\n            options: result.values,\n            selectedOption: result.values[0][0],\n            onChange: this.props.onChange\n        }\n    }\n\n    setValue(key) {\n        this.setState({selectedOption: key});\n        this.props.onChange(key);\n    }\n\n    render() {\n        const options = this.state.options;\n        const selectedOption = options.filter(x => x[0] === this.state.selectedOption)[0];\n\n        return (\n            <Dropdown className=\"query-dropdown\">\n                <Dropdown.Toggle size=\"sm\" variant=\"success\" id=\"dropdown-basic\">\n                    {selectedOption[1]}\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu>\n                    {options.map((x, i) => (\n                        <Dropdown.Item active={selectedOption[0] === x[0]} onClick={() => {this.setValue(x[0])}} key={i} eventKey={i}>{x[1]}</Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\n\nexport default class Q1PokedexLookup extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pokedex: 1,\n            result: null\n        }\n    }\n\n    runQuery() {\n        console.log(this.state.pokedex);\n        const result = sql.exec(\n            `select distinct pokedex_number \"Dex Number\", name Name, genus Genus, generation_id Gen \n            from pokemon pkmn \n            left outer join pokemon_species ps on pkmn.species_id = ps.id \n            left outer join pokemon_dex_numbers pdn on ps.id = pdn.species_id \n            where pdn.pokedex_id = ${this.state.pokedex} order by \"Dex Number\";`)[0];\n        this.setState({result: result});  \n    }\n\n    render() {\n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show all Pokemon in the</span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({pokedex: x})}} \n                        query=\"select id, name from pokedexes;\"/> \n                    <span>Pokedex.</span>\n\n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\n\nexport default class Q2MoveAilmentLookup extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            type: 1,\n            ailment: 1,\n            result: null\n        }\n    }\n\n    runQuery() {\n        const result = sql.exec(\n            `select distinct ps.name Pokemon, m.name Move, m.ailment_chance || '%' \"Ailment Chance\"\n            from pokemon p\n            left join pokemon_species ps on p.species_id = ps.id\n            left join pokemon_moves pm on p.id = pm.pokemon_id\n            left join moves m on pm.move_id = m.id\n            left join ailments a on m.ailment_id = a.id\n            left join types t on m.type_id = t.id\n            where m.type_id = ${this.state.type}\n            and a.id = ${this.state.ailment}\n            and m.ailment_chance > 0\n            order by p.id;`)[0];\n        this.setState({result: result});  \n    }\n\n    render() {\n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show all Pokemon that can learn a </span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({type: x})}} \n                        query=\"select id, name from types;\"/> \n                    <span>type move which inflicts the </span>\n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({ailment: x})}} \n                        query=\"select id, name from ailments;\"/> \n                    <span>ailment.</span>\n\n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\n\nexport default class Q3MoveStatChangeLookup extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            type: 1,\n            stat: 1,\n            target: 1,\n            result: null\n        }\n    }\n\n    runQuery() {\n        const result = sql.exec(\n            `select distinct ps.name Pokemon, m.name Move, m.stat_chance || '%' \"Success Chance\", msc.change \"Stat Change\"\n            from pokemon p\n            left join pokemon_species ps on p.species_id = ps.id\n            left join pokemon_moves pm on p.id = pm.pokemon_id\n            left join moves m on pm.move_id = m.id\n            left join move_stat_changes msc on m.id = msc.move_id\n            left join stats s on msc.stat_id = s.id\n            left join move_targets mt on m.target_id = mt.id\n            where m.type_id = ${this.state.type}\n            and mt.id = ${this.state.target}\n            and s.id = ${this.state.stat}\n            and m.stat_chance > 0;`)[0];\n        this.setState({result: result});  \n    }\n\n    render() {\n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show all Pokemon that can learn a </span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({type: x})}} \n                        query=\"select id, name from types;\"/> \n                    <span>type move which affects the </span>\n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({stat: x})}} \n                        query=\"select id, name from stats;\"/> \n                    <span>stat and targets </span>\n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({target: x})}} \n                        query=\"select id, name from move_targets;\"/> \n                    <span>.</span>\n\n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nexport default class NudOption extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: this.props.initialValue\n        }\n    }\n\n    setValue(val) {\n        val = Math.min(this.props.max, Math.max(this.props.min, val.target.value));\n        this.setState({value: val});\n        this.props.onChange(val);\n    }\n\n    render() {\n        return (\n            <div className=\"nud-input\">\n                <Form.Control size=\"sm\" type=\"number\" min={this.props.min} max={this.props.max} value={this.state.value} onChange={(x) => this.setValue(x)} />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\nimport NudOption from './NudOption';\n\nexport default class Q4EffectiveMoveLookup extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            type: 1,\n            pp: 5,\n            accuracy: 50,\n            result: null\n        }\n    }\n\n    runQuery() {\n        const result = sql.exec(\n            `select m.name \"Move\", tsrc.name \"Type\", m.pp \"PP\", m.accuracy || '%' \"Accuracy\"\n            from moves m\n            left join type_efficacy te on m.type_id = te.source_type_id\n            left join types tsrc on te.source_type_id = tsrc.id\n            left join types tdest on te.target_type_id = tdest.id\n            where damage_factor > 100\n            and tdest.id = ${this.state.type}\n            and m.pp >= ${this.state.pp}\n            and m.accuracy >= ${this.state.accuracy};`)[0];\n        this.setState({result: result});  \n    }\n\n    render() { \n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show all moves that are super effective against </span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({type: x})}} \n                        query=\"select id, name from types;\"/> \n                    <span> type Pokemon with a PP of at least </span>\n                    <NudOption \n                        onChange={(x) => {this.setState({pp: x})}} \n                        initialValue={this.state.pp}\n                        min={0}\n                        max={40}/> \n                    <span> and an accuracy of at least </span>\n                    <NudOption \n                        onChange={(x) => {this.setState({accuracy: x})}} \n                        initialValue={this.state.accuracy}\n                        min={0}\n                        max={100}/> \n                    <span> percent.</span>\n\n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport * as sql from '../SqlApi';\nimport SqlResultTable from './SqlResultTable';\nimport { Button } from 'react-bootstrap';\nimport QueryOptionsDropdown from './QueryOptionsDropdown';\nimport NudOption from './NudOption';\n\nexport default class Q5PokemonEcounterLookup extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            version: 1,\n            type: 1,\n            min: 1,\n            max: 100,\n            result: null\n        }\n    }\n\n    runQuery() {\n        const result = sql.exec(\n            `select * from \n            (select distinct ps.name \"Pokemon\", l.name \"Location\", v.name \"Game\", min(e.min_level) \"Min Level\", max(e.max_level) \"Max Level\" \n            from encounters e\n            left join pokemon p on e.pokemon_id = p.id\n            left join pokemon_species ps on p.species_id = ps.id\n            left join pokemon_types pt on p.id = pt.pokemon_id\n            left join versions v on e.version_id = v.id\n            left join location_areas la on e.location_area_id = la.id\n            left join locations l on la.location_id = l.id\n            where v.id = ${this.state.version}\n            and pt.type_id = ${this.state.type}\n            group by p.id, l.id\n            order by e.location_area_id)\n            where \"Max Level\" >= ${this.state.min}\n            and \"Min Level\" <= ${this.state.max};`)[0];\n        this.setState({result: result});  \n    }\n\n    render() { \n        const result = this.state.result;\n        let table;\n\n        if (result) {\n            table = (<SqlResultTable rows={result.values} cols={result.columns}/>);\n        } else if (result === undefined) {\n            table = (<div className=\"sql-result-table\"><p>Got 0 results.</p></div>);\n        } else {\n            table = (<div className=\"sql-result-table\"><p>Results will appear here.</p></div>);\n        }\n\n        return (\n            <div>\n                <div className='inline-query-span'>\n                    <span>Show where to catch </span> \n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({type: x})}} \n                        query=\"select id, name from types;\"/> \n                    <span> type Pokemon between levels </span>\n                    <NudOption \n                        onChange={(x) => {this.setState({min: x})}} \n                        initialValue={this.state.min}\n                        min={0}\n                        max={100}/> \n                    <span> and </span>\n                    <NudOption \n                        onChange={(x) => {this.setState({max: x})}} \n                        initialValue={this.state.max}\n                        min={0}\n                        max={100}/> \n                    <span> in Pokemon </span>\n                    <QueryOptionsDropdown \n                        onChange={(x) => {this.setState({version: x})}} \n                        query=\"select id, name from versions v where v.id in (select e.version_id from encounters e);\"/> \n                    <span>.</span>\n\n                    <Button size=\"sm\" onClick={() => {this.runQuery()}}>Query</Button>\n                </div>\n                <hr/>\n                {table}\n            </div>\n        );\n    }\n}","import './App.css';\nimport React from 'react';\nimport * as sql from './SqlApi';\nimport Q1PokedexLookup from './components/Q1PokedexLookup';\nimport { Container, Navbar, Tabs, Tab } from 'react-bootstrap';\nimport Q2MoveAilmentLookup from './components/Q2MoveAilmentLookup';\nimport Q3MoveStatChangeLookup from './components/Q3MoveStatChangeLookup';\nimport Q4EffectiveMoveLookup from './components/Q4EffectiveMoveLookup';\nimport Q5PokemonEcounterLookup from './components/Q5PokemonEcounterLookup';\n\nexport default class App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            init: false\n        }\n\n        sql.initSqlite().then(() => {\n            window.sql = sql;\n            this.setState({init: true});\n        });\n    }\n\n    \n\n    render() {\n        if (this.state.init) {\n            return (\n                <div>\n                    <Navbar bg=\"dark\" variant=\"dark\">\n                        <Navbar.Brand>PokeQuery</Navbar.Brand>\n                    </Navbar>\n                    <Container>\n                        <Tabs defaultActiveKey=\"q1\">\n                            <Tab eventKey=\"q1\" title=\"Pokedex Lookup\">\n                                <Q1PokedexLookup/>\n                            </Tab>\n                            <Tab eventKey=\"q2\" title=\"Pokemon Move Ailment Lookup\">\n                                <Q2MoveAilmentLookup/>\n                            </Tab>\n                            <Tab eventKey=\"q3\" title=\"Pokemon Move Stat Lookup\">\n                                <Q3MoveStatChangeLookup/>\n                            </Tab>\n                            <Tab eventKey=\"q4\" title=\"Effective Move Lookup\">\n                                <Q4EffectiveMoveLookup/>\n                            </Tab>\n                            <Tab eventKey=\"q5\" title=\"Pokemon Encounter Lookup\">\n                                <Q5PokemonEcounterLookup/>\n                            </Tab>\n                        </Tabs>\n                    </Container>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"App\">\n                    <p>Please wait while we load the database...</p>\n                </div>\n            );\n        }\n    }\n}","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}